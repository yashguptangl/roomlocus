// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model User {
    id              Int      @id @default(autoincrement())  
    username        String
    email           String     @unique
    mobile          String     @unique
    password        String   
    otp             Int
    role            String   @default("user")
    isPhoneVerified Boolean @default(false)
    contactLogs     ContactLog[]
    wishlists       Wishlist[]
}
  
model Owner {
    id                Int       @id @default(autoincrement())  
    username          String
    email             String
    mobile            String     @unique
    password          String   
    otp               Int
    isPhoneVerified   Boolean   @default(false)
    role             String   @default("owner")
    FlatInfo          FlatInfo[]
    PgInfo            PgInfo[]
    RoomInfo          RoomInfo[]
    points            Int       @default(10)  // Initial points assigned
    isKYCVerified     Boolean   @default(false)
    contactLogs       ContactLog[]
    verificationRequests VerificationRequest[]
    HourlyInfo         hourlyInfo[]
}

model Agent {
    id                 Int        @id @default(autoincrement())
    username           String
    email              String     @unique
    mobile             String     @unique
    password           String
    otp                Int
    isPhoneVerified    Boolean    @default(false)
    role               String     @default("agent")
    agentId            String     @unique
    isVerifiedByAdmin  Boolean    @default(false)
    isKYCVerified      Boolean    @default(false)
    personverifiedName String
    walletRs           Int       @default(0)  // Initial wallet amount
    isProfileComplete Boolean    @default(false)
    Agentprogress      Agentprogress[]
    VerificationRequests VerificationRequest[]
}

model Agentprogress{
    id               Int       @id @default(autoincrement())
    agentId          String    @unique
    agent            Agent     @relation(fields: [agentId], references: [agentId])
    step             String
    data             Json
    createdAt        DateTime   @default(now())
    updatedAt        DateTime   @updatedAt 
}
  
model FlatInfo {
    id                  Int        @id @default(autoincrement())
    ownerId             Int
    Type                String     @default("Flat")
    owner               Owner      @relation(fields: [ownerId], references: [id])
    city                String
    townSector          String
    location            String
    landmark            String
    BHK                 String
    MaxPrice            Int
    MinPrice            Int
    Offer               String
    security            Int
    maintenance         Int
    totalFlat           Int
    Adress              String
    totalFloor          Int
    waterSupply         Int
    powerBackup         Int
    noticePeriod        String
    furnishingType      String
    accomoType          String
    parking             String[]
    preferTenants       String[]
    petsAllowed         Boolean
    genderPrefer        String
    flatType            String
    careTaker           String
    listingShowNo       String
    latitude            Decimal
    longitude           Decimal
    AdressByAPI         String 
    isLiveLocation      Boolean   @default(false)
    flatInside          String[]
    flatOutside         String[]
    isVerified          Boolean   @default(false)
    verificationPending Boolean   @default(true)
    paymentDone         Boolean   @default(false)
    isVisible           Boolean   @default(true) // Control visibility manually
    isDraft             Boolean 
    postPropertyByAdmin Boolean   @default(false)  
    updatedByOwner      DateTime  @updatedAt
    verifiedByAdminOrAgent   DateTime  @updatedAt
    createdAt          DateTime  @default(now())
}

model PgInfo {
    id                  Int        @id @default(autoincrement())
    ownerId             Int
    Type                String     @default("Pg")
    owner               Owner      @relation(fields: [ownerId], references: [id])
    city                String
    townSector          String
    location            String
    landmark            String
    BHK                 String
    MinPrice            Int
    MaxPrice            Int
    adress              String
    Offer               String
    security            Int
    maintenance         Int
    totalPG             Int
    totalFloor          Int
    waterSupply         Int
    PGType              String
    bedCount            Int
    powerBackup         Int
    noticePeriod        String
    furnishingType      String
    accomoType          String
    foodAvailable       Boolean
    parking             String[]
    preferTenants       String[]
    genderPrefer        String
    timeRestrict        Boolean
    PGInside          String[]
    PGOutside         String[]
    careTaker           String
    listingShowNo       String   
    latitude            Decimal
    longitude           Decimal
    AdressByAPI         String 
    isLiveLocation      Boolean   @default(false)
    isVerified          Boolean   @default(false)
    verificationPending Boolean   @default(true)
    paymentDone         Boolean   @default(false)
    isVisible           Boolean   @default(true) // Control visibility manually
    isDraft             Boolean
    postPropertyByAdmin Boolean   @default(false)
    updatedByOwner      DateTime  @updatedAt
    verifiedByAdminOrAgent   DateTime  @updatedAt
    createdAt          DateTime  @default(now())
}
  
model RoomInfo {
    id                  Int        @id @default(autoincrement())
    ownerId             Int
    Type                String     @default("Room")
    owner               Owner      @relation(fields: [ownerId], references: [id])
    city                String
    townSector          String
    location            String
    BHK                 String
    landmark            String
    MinPrice            Int
    MaxPrice            Int
    Offer               String
    adress              String
    security            Int
    maintenance         Int
    totalRoom           Int
    totalFloor          Int
    powerBackup         Int
    noticePeriod        String
    waterSupply         Int
    furnishingType      String
    accomoType          String
    parking             String[]
    preferTenants       String[]
    genderPrefer        String
    roomType            String
    roomInside          String[]
    roomOutside         String[]
    careTaker           String
    listingShowNo       String
    latitude            Decimal
    longitude           Decimal
    AdressByAPI         String 
    isLiveLocation      Boolean   @default(false)
    RoomAvailable       String
    isVerified          Boolean   @default(false)
    verificationPending Boolean   @default(true)
    paymentDone         Boolean   @default(false)
    isVisible           Boolean   @default(true) // Control visibility manually
    isDraft             Boolean
    postPropertyByAdmin Boolean   @default(false)
    updatedByOwner      DateTime  @updatedAt
    verifiedByAdminOrAgent   DateTime  @updatedAt
    createdAt          DateTime  @default(now())
}

model hourlyInfo {
    id              Int      @id @default(autoincrement())
    ownerId         Int
    Type            String   @default("hourlyroom")
    city            String
    townSector      String
    location        String
    landmark        String
    palaceName      String
    BedCount        Int
    MinPrice        Int
    MaxPrice        Int
    adress          String
    totalRoom       Int
    totalFloor      Int
    noofGuests      Int
    furnishingType  String
    accomoType      String
    acType          String
    parking         String[]
    foodAvailable   Boolean
    preferTenants   String[]
    genderPrefer    String
    roomType        String
    roomInside      String[]
    roomOutside     String[]
    manager         String
    listingShowNo   String
    latitude            Decimal   @default(0)
    longitude           Decimal   @default(0)
    AdressByAPI         String    @default("")
    isLiveLocation      Boolean   @default(false)
    luxury              String
    owner               Owner      @relation(fields: [ownerId], references: [id])  
    isVerified          Boolean   @default(false)
    verificationPending Boolean   @default(true)
    paymentDone         Boolean   @default(false)
    isVisible           Boolean   @default(true)
    isDraft             Boolean
    postPropertyByAdmin Boolean   @default(false)
    updatedByOwner      DateTime  @updatedAt
    verifiedByAdminOrAgent   DateTime  @updatedAt
    createdAt          DateTime  @default(now())
}
  
model ContactLog {
    id            Int      @id @default(autoincrement())
    ownerId       Int
    userId        Int
    ownerName    String
    user          User     @relation(fields: [userId], references: [id])
    owner         Owner    @relation(fields: [ownerId], references: [id])
    listingId     Int
    customerName  String
    customerPhone String
    ownerPhone    String
    location      String
    landmark      String
    accessDate    DateTime  
    expiryDate    DateTime 
    propertyType  String
    isExpired     Boolean  @default(false) // Automatically expires after 30 days
    userDeleted   Boolean  @default(false) // User can delete the log
    ownerDeleted  Boolean  @default(false) // Owner can delete the log
}

model VerificationRequest {
  id                   String   @id @default(uuid())
  listingType          String   
  ownerId              Int
  owner                Owner      @relation(fields: [ownerId], references: [id])
  agent                Agent?     @relation(fields: [agentId], references: [agentId])
  agentId              String?
  listingId            Int
  verificationType     VerifyType @default(SELF) // "Self" | "Agent"
  status               StatusType @default(PENDING) // "Pending" | "Confirmed" | "Cancelled"
  imagesUploaded       Boolean    @default(false)
  createdAt            DateTime   @default(now())
  location             String
  city                 String
  townSector           String
  address              String
  listingShowNo        String?
  updatedAt            DateTime   @updatedAt
  @@index([agentId])
}

enum StatusType { 
  PENDING
  PAY
  CANCELLED_PAYMENT
  DONE
}

enum VerifyType {
  SELF
  AGENT
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int
  listingId Int
  type      String  // "flat", "pg", "room"
  createdAt DateTime @default(now())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

}

model Admin {
  id       Int      @id @default(autoincrement())
  username String   
  email    String   @unique
  password String
  role     Role     @default(EMPLOYEE)
  verified Boolean  @default(false)
  createdAt DateTime @default(now())
  
}

enum Role {
  EMPLOYEE
  ADMIN
}

model Payment {
  id          String  @id @default(cuid())
  orderId     String  @unique
  razorpayOrderId   String?  @unique
  razorpayPaymentId String?  @unique
  listingId   String
  listingType String
  email       String
  phone       String
  amount      Float
  status      String
  city        String?
  townSector  String?
  address     String?
  location    String?
  listingShowNo String?
  leadCount   Int?
  leadPrice   Float?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}


enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}


model TempMobileVerification {
  id        Int      @id @default(autoincrement())
  mobile    String   @unique
  otp       Int
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  expiresAt DateTime
}
